<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
-->

<template name="editCellData" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="configMode" description="Mode of operation - BASIC or ADVANCED"/>
    <parameter name="spreadsheetId" description="Unique identifier of the spreadsheet"/>
    <parameter name="sheetName" description="Name of the sheet (Tab Level) in BASIC mode"/>
    <parameter name="cellId" description="Cell ID (e.g. A1) in BASIC mode"/>
    <parameter name="range" description="The A1 notation range in ADVANCED mode"/>
    <parameter name="value" description="The new value to set in the cell (For BASIC mode)"/>
    <parameter name="valueInputOption" description="How the input data should be interpreted (For ADVANCED mode)"/>
    <parameter name="majorDimension" description="The major dimension of the values (For ADVANCED mode)"/>
    <parameter name="values" description="Array of arrays of values to update cells with (For ADVANCED mode)"/>
    <parameter name="fields" description="Fields to include in partial response"/>
    <parameter name="responseVariable" description="Name of the variable to store operation output"/>
    <parameter name="overwriteBody" description="Replace Message Body with operation output"/>
    <sequence>
        <header name="Authorization" expression="fn:concat('Bearer ', $ctx:_ACTIVE_ACCESS_TOKEN_)" scope="transport"/>
        <property name="configMode" expression="$func:configMode"/>
        <property name="uri.var.spreadsheetId" expression="$func:spreadsheetId"/>
        <property name="sheetName" expression="$func:sheetName"/>
        <property name="cellId" expression="$func:cellId"/>
        <property name="range" expression="$func:range"/>
        <property name="value" expression="$func:value"/>
        <property name="valueInputOption" expression="$func:valueInputOption"/>
        <property name="majorDimension" expression="$func:majorDimension"/>
        <property name="values" expression="$func:values"/>
        <property name="fields" expression="$func:fields"/>
        <script language="rhinoJs">
            <![CDATA[
                var configMode = mc.getProperty("configMode") || "BASIC";
                var sheetName = mc.getProperty("sheetName");
                var cellId = mc.getProperty("cellId");
                var range = mc.getProperty("range");
                var value = mc.getProperty("value");
                var valueInputOption = mc.getProperty("valueInputOption") || "USER_ENTERED";
                var majorDimension = mc.getProperty("majorDimension") || "ROWS";
                var values = mc.getProperty("values");
                var fields = mc.getProperty("fields");

                // Handle BASIC vs ADVANCED mode for range construction
                var finalRange;
                if (configMode == "BASIC") {
                    if (!sheetName || !cellId || !value) {
                        throw new Error("sheetName, cellId, and value are required in BASIC mode");
                    }
                    finalRange = sheetName + "!" + cellId;
                } else {
                    if (!range) {
                        throw new Error("range is required in ADVANCED mode");
                    }
                    finalRange = range;
                }
                
                var urlParamString = '';
                if (fields != null && fields != "") {
                    urlParamString += '&fields=' + fields;
                }
                urlParamString += '&valueInputOption=' + valueInputOption;
                
                if(urlParamString != '') {
                    urlParamString = '?' + urlParamString.toString().substring(1);
                }
                mc.setProperty('uri.var.urlParamString', urlParamString);
                mc.setProperty('uri.var.range', finalRange);
                
                payload = {};
                
                if (configMode == "BASIC") {
                    payload.values = [[value]];
                    payload.majorDimension = "ROWS";
                } else {
                    // Advanced mode
                    if (values != null && values != "" && values != []) {
                        payload.values = eval("("+values+")");
                    } else {
                        throw new Error("values parameter is required in ADVANCED mode");
                    }
                    if (majorDimension != null && majorDimension != "") {
                        payload.majorDimension = majorDimension;
                    }
                }
                
                mc.setPayloadJSON(payload);
            ]]>
        </script>
        <property name="messageType" value="application/json" scope="axis2"/>
        <filter source="$ctx:spreadsheetBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="put"
                              uri-template="{uri.var.apiUrl}/{+uri.var.spreadsheetId}/values/{uri.var.range}{+uri.var.urlParamString}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="put"
                              uri-template="{uri.var.apiUrl}/{+uri.var.spreadsheetId}/values/{uri.var.range}{+uri.var.urlParamString}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>
