<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 LLC. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
-->

<template name="createNewSheet" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="configMode" description="configMode of operation - BASIC or ADVANCED"/>
    <parameter name="title" description="Title of the spreadsheet (Required for BASIC configMode)"/>
    <parameter name="initialSheetName" description="Name of the first sheet (Optional for BASIC configMode)"/>
    <parameter name="spreadsheetId" description="Unique identifier of the spreadsheet (For ADVANCED configMode)"/>
    <parameter name="properties" description="Properties of the spreadsheet (For ADVANCED configMode)"/>
    <parameter name="sheets" description="List of sheets and their properties (For ADVANCED configMode)"/>
    <parameter name="namedRanges" description="Create names that refer to cells (For ADVANCED configMode)"/>
    <parameter name="fields" description="Fields to include in partial response"/>
    <parameter name="responseVariable" description="Name of the variable to store operation output"/>
    <parameter name="overwriteBody" description="Replace Message Body with operation output"/>
    <sequence>
        <header name="Authorization" expression="fn:concat('Bearer ', $ctx:_ACTIVE_ACCESS_TOKEN_)" scope="transport"/>
        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
        <property name="configMode" expression="$func:configMode"/>
        <property name="title" expression="$func:title"/>
        <property name="initialSheetName" expression="$func:initialSheetName"/>
        <property name="spreadsheetId" expression="$func:spreadsheetId"/>
        <property name="properties" expression="$func:properties"/>
        <property name="sheets" expression="$func:sheets"/>
        <property name="namedRanges" expression="$func:namedRanges"/>
        <property name="fields" expression="$func:fields"/>
        <script language="rhinoJs">
            <![CDATA[
                var configMode = mc.getProperty("configMode") || "BASIC";
                var title = mc.getProperty("title");
                var initialSheetName = mc.getProperty("initialSheetName") || "Sheet1";
                var spreadsheetId = mc.getProperty("spreadsheetId");
                var properties = mc.getProperty("properties");
                var sheets = mc.getProperty("sheets");
                var fields = mc.getProperty("fields");
                var namedRanges = mc.getProperty("namedRanges");
                
                var urlParamString = '';
                if (fields != "" && fields != null) {
                    urlParamString += '&fields=' + fields;
                }
                if(urlParamString != '') {
                    urlParamString = '?' + urlParamString.toString().substring(1);
                }
                mc.setProperty('uri.var.urlParamString', urlParamString);
                
                payload = {};
                
                if (configMode == "BASIC") {
                    if (!title) {
                        throw new Error("Title is required in BASIC configMode");
                    }
                    payload.properties = { title: title };
                    payload.sheets = [{ 
                        properties: {
                            title: initialSheetName
                        }
                    }];
                } else {
                    // Advanced configMode
                    if (spreadsheetId != null && spreadsheetId != "") {
                        payload.spreadsheetId = spreadsheetId;
                    }
                    if (properties != null && properties != "" && properties != {} ) {
                        payload.properties = eval("("+properties+")");
                    }
                    if (sheets != null && sheets != "" && sheets!= []) {
                        payload.sheets = eval("("+sheets+")");
                    }
                    if (namedRanges != null && namedRanges != "" && namedRanges!= []) {
                        payload.namedRanges = eval("("+namedRanges+")");
                    }
                }
                mc.setPayloadJSON(payload);
            ]]>
        </script>
        <property name="messageType" value="application/json" scope="axis2"/>
        <filter source="$ctx:spreadsheetBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="post"
                              uri-template="{uri.var.apiUrl}/{+uri.var.urlParamString}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="post"
                              uri-template="{uri.var.apiUrl}/{+uri.var.urlParamString}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>
